{"version":3,"sources":["components/Home.js","components/Detail.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","change","e","setState","defineProperty","target","name","value","state","title","message","post","JSON","parse","localStorage","getItem","path","setItem","stringify","history","push","_this2","react_default","a","createElement","placeholder","onChange","cols","rows","type","onClick","nextPath","Component","Detail","prop","className","App","BrowserRouter","Route","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wUAwKeA,qBApKb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAmBRQ,OAAS,SAACC,GACRR,EAAKS,SAALR,OAAAS,EAAA,EAAAT,CAAA,GACGO,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,SAnB5Bb,EAAKc,MAAQ,CACXC,MAAO,GACPC,QAAS,IALMhB,mFAUjB,IAAMiB,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,SAC7ClB,KAAKM,SAASQ,oCAGPK,GACPF,aAAaG,QAAQ,OAAQL,KAAKM,UAAUrB,KAAKW,QACjDX,KAAKJ,MAAM0B,QAAQC,KAAKJ,oCAUjB,IAAAK,EAAAxB,KACP,OACEyB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACElB,KAAK,QACLC,MAAOV,KAAKW,MAAMC,MAClBgB,YAAY,kBACZC,SAAU,SAAAxB,GAAC,OAAImB,EAAKpB,OAAOC,OAI/BoB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,YACElB,KAAK,UACLC,MAAOV,KAAKW,MAAME,QAClBgB,SAAU,SAAAxB,GAAC,OAAImB,EAAKpB,OAAOC,IAC3BuB,YAAY,oBAAoBE,KAAM,GAAIC,KAAM,MAEpDN,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASC,QAAS,SAAC5B,GAAD,OAAOmB,EAAKU,SAAS,aAApD,mBA/CSC,cCiCJC,qBA/Bb,SAAAA,EAAYC,GAAM,IAAAxC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IAChBvC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAMqC,KAED1B,MAAQ,CACXC,MAAO,GACPC,QAAS,IALKhB,mFAUhB,IAAMiB,EAAOC,KAAKC,MAAMC,aAAaC,QAAQ,SAC7ClB,KAAKM,SAASQ,oCAIRK,GACRnB,KAAKJ,MAAM0B,QAAQC,KAAKJ,oCAGf,IAAAK,EAAAxB,KACP,OACEyB,EAAAC,EAAAC,cAAA,OAAKW,UAAU,UACdb,EAAAC,EAAAC,cAAA,UAAK3B,KAAKW,MAAMC,OAChBa,EAAAC,EAAAC,cAAA,YAAO3B,KAAKW,MAAME,SAClBY,EAAAC,EAAAC,cAAA,UAAQM,QAAS,SAAC5B,GAAD,OAAOmB,EAAKU,SAAS,OAAtC,gBA1BcC,cCiBNI,mLAXX,OACEd,EAAAC,EAAAC,cAACa,EAAA,EAAD,KACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOtB,KAAK,IAAIuB,UAAW/C,EAAMgD,OAAK,IACtClB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAOtB,KAAK,UAAUuB,UAAWN,aAPzBD,aCMES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.55bb045c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Home.css';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      title: '',\n      message: '',\n    }\n  }\n\n  componentDidMount() {\n    const post = JSON.parse(localStorage.getItem('Post'));\n    this.setState(post);\n  }\n\n  nextPath(path) {\n    localStorage.setItem(\"Post\", JSON.stringify(this.state));\n    this.props.history.push(path);\n  }\n\n  // updating every input element\n  change = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          <div>\n            <input\n              name='title'\n              value={this.state.title}\n              placeholder=\"Enter the title\"\n              onChange={e => this.change(e)}\n            />\n          </div>\n\n          <div>\n            <textarea \n              name='message'\n              value={this.state.message}\n              onChange={e => this.change(e)}\n              placeholder=\"Write the message\" cols={30} rows={30} />\n          </div>\n          <button type=\"button\" onClick={(e) => this.nextPath('/detail') }>Submit</button>\n        </form>\n      </div>\n    )\n    // const isDetailPage = this.state.detailPage;\n    // return (\n    //   <div className=\"Home\">\n    //     {!isDetailPage ? (\n    //       <form>\n    //         <table>\n    //           <thead>\n    //             <tr>\n    //               <th colSpan=\"4\">Register</th>\n    //             </tr>\n    //           </thead>\n    //           <tbody>\n    //             <tr>\n    //               <td className=\"homeLabel\">First name: </td>\n    //               <td className=\"homeLabel\">\n    //                 <input\n    //                   name='firstName'\n    //                   value={this.state.firstName}\n    //                   onChange={e => this.change(e)}\n    //                 />\n    //               </td>\n    //               <td className=\"homeLabel\">Last name: </td>\n    //               <td className=\"homeLabel\">\n    //                 <input\n    //                   name='lastName'\n    //                   value={this.state.lastName}\n    //                   onChange={e => this.change(e)}\n    //                 />\n    //               </td>\n    //             </tr>\n    //             <tr>\n    //               <td className=\"homeLabel\">Address: </td>\n    //               <td className=\"homeLabel\">\n    //                 <input\n    //                   name='address'\n    //                   value={this.state.address}\n    //                   onChange={e => this.change(e)}\n    //                 />\n    //               </td>\n    //               <td className=\"homeLabel\">Postcode: </td>\n    //               <td className=\"homeLabel\">\n    //                 <input\n    //                   name='postcode'\n    //                   value={this.state.postcode}\n    //                   onChange={e => this.change(e)}\n    //                 />\n    //               </td>\n    //             </tr>\n    //             <tr>\n    //               <td className=\"homeLabel\">City: </td>\n    //               <td className=\"homeLabel\">\n    //                 <input\n    //                   name='city'\n    //                   value={this.state.city}\n    //                   onChange={e => this.change(e)}\n    //                 />\n    //               </td>\n    //               <td className=\"homeLabel\">Country: </td>\n    //               <td className=\"homeLabel\">\n    //                 <input\n    //                   name='country'\n    //                   value={this.state.country}\n    //                   onChange={e => this.change(e)}\n    //                 />\n    //               </td>\n    //             </tr>\n    //             <tr>\n    //               <td className=\"homeLabel\">Mobile: </td>\n    //               <td className=\"homeLabel\">\n    //                 <input\n    //                   name='mobile'\n    //                   value={this.state.mobile}\n    //                   onChange={e => this.change(e)}\n    //                 />\n    //               </td>\n    //               <td className=\"homeLabel\">Telephone: </td>\n    //               <td className=\"homeLabel\">\n    //                 <input\n    //                   name='telephone'\n    //                   value={this.state.telephone}\n    //                   onChange={e => this.change(e)}\n    //                 />\n    //               </td>\n    //             </tr>\n    //             <tr>\n    //               <td className=\"homeLabel\">E-mail: </td>\n    //               <td className=\"homeLabel\">\n    //                 <input\n    //                   name='email'\n    //                   value={this.state.email}\n    //                   onChange={e => this.change(e)}\n    //                 />\n    //               </td>\n    //               <td className=\"homeLabel\">Username: </td>\n    //               <td className=\"homeLabel\">\n    //                 <input\n    //                   name='username'\n    //                   value={this.state.username}\n    //                   onChange={e => this.change(e)}\n    //                 />\n    //               </td>\n    //             </tr>\n    //           </tbody>\n    //         </table>\n    //         <button  onClick={(e) => this.nextPath('/detail',e) }>Submit</button>\n    //       </form>\n    //     ) : (\n    //         <Detail properties={this.state} handlerFromParant={this.handleData} />\n    //       )}\n    //   </div>\n    // );\n  }\n\n}\nexport default Home;\n","import React, { Component } from 'react';\nimport './Detail.css';\n\nclass Detail extends Component {\n\n  constructor(prop) {\n    super(prop)\n\n    this.state = {\n      title: '',\n      message: '',\n    }\n\n  }\n  componentDidMount() {\n    const post = JSON.parse(localStorage.getItem('Post'));\n    this.setState(post);\n    \n }\n\n nextPath(path) {\n  this.props.history.push(path);\n}\n\n  render() {\n    return (\n      <div className=\"Detail\">\n       <h1>{this.state.title}</h1>\n       <span>{this.state.message}</span>\n       <button onClick={(e) => this.nextPath('/') }>Edit</button>\n      </div>\n    );\n  }\n\n}\n\nexport default Detail;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Home from './components/Home';\nimport Detail from './components/Detail'\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Route path=\"/\" component={Home} exact/>\n          <Route path=\"/detail\" component={Detail} />\n        </div>\n      </BrowserRouter>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}